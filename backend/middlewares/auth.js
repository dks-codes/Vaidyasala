import { catchAsyncErrors } from "./catchAsyncErrors.js";
import ErrorHandler from "./errorMiddleware.js";
import jwt from "jsonwebtoken";
import { User } from "../models/userSchema.js";

//For Authentication and Authorization
export const isAdminAuthenticated = catchAsyncErrors(async (req, res, next) => {
  const token = req.cookies.adminToken;
  if (!token) {
    return next(new ErrorHandler("Admin Not Authenticated!", 400));
  }
  const decoded = jwt.verify(token, process.env.JWT_SECRET_KEY); //Verify that the token was generated by this system
  req.user = await User.findById(decoded.id); // Gets the user using the "id" that was used to generate the JsonWebToken in userSchema

  //Authorization
  if (req.user.role !== "Admin") {
    return next(
      new ErrorHandler(
        `${req.user.role} is not authorized for this resource!`,
        403                  //Forbidden
      )
    ); 
  }

  next();
});



export const isPatientAuthenticated = catchAsyncErrors(
  async (req, res, next) => {
    const token = req.cookies.patientToken;
    if (!token) {
      return next(new ErrorHandler("Patient Not Authenticated!", 400));
    }
    const decoded = jwt.verify(token, process.env.JWT_SECRET_KEY); //Verify that the token was generated by this system
    req.user = await User.findById(decoded.id); // Gets the user using the "id" that was used to generate the JsonWebToken in userSchema

    //Authorization
    if (req.user.role !== "Patient") {
      return next(
        new ErrorHandler(
          `${req.user.role} is not authorized for this resource!`,
          403
        )
      ); //Forbidden
    }

    next();
  }
);
